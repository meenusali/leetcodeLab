{
  "problems": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "difficulty": "EASY",
      "companies": ["Google", "Facebook", "Amazon"],
      "tags": ["Array", "Hash Table"],
      "examples": {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9"
      },
      "constraints": [
        "-10^9 <= nums[i] <= 10^9",
        "-10^9 <= target <= 10^9"
      ],
      "testcases": [
        {
          "input": "[2,7,11,15], 9",
          "output": "[0,1]"
        },
        {
          "input": "[3,2,4], 6",
          "output": "[1,2]"
        }
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "difficulty": "EASY",
      "companies": ["Google", "Facebook", "Amazon", "Microsoft"],
      "tags": ["String", "Stack"],
      "examples": {
        "input": "s = '()[]{}'"
      },
      "constraints": [
        "-1000 <= s.length <= 1000"
      ],
      "testcases": [
        {
          "input": "()",
          "output": "true"
        },
        {
          "input": "([{}])",
          "output": "true"
        }
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.",
      "difficulty": "EASY",
      "companies": ["Google", "Facebook", "Amazon", "Apple"],
      "tags": ["Linked List", "Recursion"],
      "examples": {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]"
      },
      "constraints": [
        "0 <= list1.length, list2.length <= 50",
        "-100 <= Node.val <= 100"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock",
      "description": "You are given an array prices where prices[i] is the price of a given stock on the i-th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.",
      "difficulty": "EASY",
      "companies": ["Google", "Facebook", "Amazon", "Microsoft"],
      "tags": ["Array", "Dynamic Programming"],
      "examples": {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      "constraints": [
        "1 <= prices.length <= 10^5",
        "0 <= prices[i] <= 10^4"
      ]
    },
    {
      "title": "Longest Substring Without Repeating Characters",
      "description": "Given a string s, find the length of the longest substring without repeating characters.",
      "difficulty": "MEDIUM",
      "companies": ["Google", "Facebook", "Amazon", "Microsoft"],
      "tags": ["String", "Sliding Window", "Hash Table"],
      "examples": {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "'abc' is the longest substring without repeating characters"
      },
      "constraints": [
        "0 <= s.length <= 5 * 10^4",
        "s consists of English letters, digits, symbols and spaces"
      ]
    }
  ]
} 